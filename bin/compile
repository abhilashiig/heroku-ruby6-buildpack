#!/usr/bin/env bash
set -e # Exit immediately if a command exits with a non-zero status

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

echo "-----> Installing Ruby and Bundler"

# Ruby and Bundler versions
RUBY_VERSION=2.6.6
BUNDLER_VERSION=1.17.3

# Create directories
RUBY_INSTALL_DIR="$BUILD_DIR/.heroku/ruby"
mkdir -p "$RUBY_INSTALL_DIR"
mkdir -p "$CACHE_DIR/ruby"

# Download and install Ruby
echo "-----> Downloading Ruby $RUBY_VERSION"

# Use official Ruby source
RUBY_SOURCE_URL="https://cache.ruby-lang.org/pub/ruby/2.6/ruby-$RUBY_VERSION.tar.gz"
RUBY_SOURCE_DIR="$CACHE_DIR/ruby/source"
RUBY_BUILD_DIR="$CACHE_DIR/ruby/build"

RUBY_INSTALLED=false

# Try to use cached compiled Ruby first
CACHED_RUBY="$CACHE_DIR/ruby/ruby-$RUBY_VERSION-compiled.tar.gz"
if [ -f "$CACHED_RUBY" ]; then
  echo "-----> Using cached compiled Ruby $RUBY_VERSION"
  tar -xzf "$CACHED_RUBY" -C "$RUBY_INSTALL_DIR" --strip-components=1
  RUBY_INSTALLED=true
else
  echo "-----> Downloading Ruby $RUBY_VERSION source from $RUBY_SOURCE_URL"
  mkdir -p "$RUBY_SOURCE_DIR" "$RUBY_BUILD_DIR"
  
  # Download Ruby source
  if curl -sSL "$RUBY_SOURCE_URL" -o ruby-source.tar.gz && [ -s ruby-source.tar.gz ]; then
    echo "-----> Extracting Ruby source"
    tar -xzf ruby-source.tar.gz -C "$RUBY_SOURCE_DIR" --strip-components=1
    rm ruby-source.tar.gz
    
    # Install build dependencies
    echo "-----> Installing build dependencies"
    apt_deps="libssl-dev libreadline-dev zlib1g-dev autoconf bison build-essential libyaml-dev libreadline-dev libncurses5-dev libffi-dev libgdbm-dev"
    
    # Check if we can install dependencies
    if command -v apt-get >/dev/null; then
      apt-get update -qq
      apt-get install -qq -y $apt_deps > /dev/null 2>&1 || echo "-----> Warning: Could not install all build dependencies. Compilation may fail."
    else
      echo "-----> Warning: apt-get not available. Build dependencies may be missing."
    fi
    
    echo "-----> Configuring and compiling Ruby $RUBY_VERSION (this may take a few minutes)"
    cd "$RUBY_SOURCE_DIR"
    
    # Configure with prefix set to the Ruby install directory
    ./configure --prefix="$RUBY_INSTALL_DIR" --disable-install-doc --enable-shared > "$BUILD_DIR/ruby-configure.log" 2>&1 || {
      echo "-----> Ruby configure failed. See $BUILD_DIR/ruby-configure.log for details."
      exit 1
    }
    
    # Compile Ruby
    make -j$(nproc) > "$BUILD_DIR/ruby-make.log" 2>&1 || {
      echo "-----> Ruby compilation failed. See $BUILD_DIR/ruby-make.log for details."
      exit 1
    }
    
    # Install Ruby
    make install > "$BUILD_DIR/ruby-install.log" 2>&1 || {
      echo "-----> Ruby installation failed. See $BUILD_DIR/ruby-install.log for details."
      exit 1
    }
    
    # Create a tarball of the compiled Ruby for future use
    echo "-----> Caching compiled Ruby for future builds"
    mkdir -p "$CACHE_DIR/ruby"
    cd "$RUBY_INSTALL_DIR"
    tar -czf "$CACHED_RUBY" .
    
    RUBY_INSTALLED=true
  else
    echo "-----> Failed to download Ruby $RUBY_VERSION source."
  fi
fi

if [ "$RUBY_INSTALLED" = false ]; then
  echo "Failed to install Ruby $RUBY_VERSION. See logs for details." >&2
  exit 1
fi

# Add Ruby to PATH and verify it works
export PATH="$RUBY_INSTALL_DIR/bin:$PATH"
echo "-----> Ruby path: $RUBY_INSTALL_DIR/bin"

# Verify Ruby installation
if command -v ruby >/dev/null; then
  ruby_version=$(ruby -v)
  echo "-----> Ruby version: $ruby_version"
else
  echo "-----> Ruby command not found in PATH: $PATH" >&2
  exit 1
fi

# Install Bundler
echo "-----> Installing Bundler version $BUNDLER_VERSION"
if ! command -v bundler &>/dev/null || [[ "$(bundler --version 2>/dev/null || echo '')" != *"$BUNDLER_VERSION"* ]]; then
  gem install bundler -v "$BUNDLER_VERSION" --no-document
fi

# Verify Bundler installation
if command -v bundler >/dev/null; then
  bundler_version=$(bundler --version)
  echo "-----> Bundler version: $bundler_version"
else
  echo "-----> Bundler command not found" >&2
  exit 1
fi

# Write .ruby-version and .bundle/config for the build
mkdir -p "$BUILD_DIR/.bundle"
echo "$RUBY_VERSION" > "$BUILD_DIR/.ruby-version"
echo -e "---\nBUNDLE_PATH: vendor/bundle\nBUNDLE_DISABLE_SHARED_GEMS: '1'\n" > "$BUILD_DIR/.bundle/config"

# Install gems
echo "-----> Installing dependencies using Bundler version $BUNDLER_VERSION"
cd "$BUILD_DIR"
bundle _${BUNDLER_VERSION}_ install --path=vendor/bundle --without development test || {
  echo "Bundler install failed" >&2
  exit 1
}

echo "-----> Bundle installation completed successfully"
exit 0
